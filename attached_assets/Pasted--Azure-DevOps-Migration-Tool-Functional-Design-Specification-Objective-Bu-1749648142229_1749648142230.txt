**Azure DevOps Migration Tool - Functional & Design Specification**

---

## üîÑ Objective:

Build an Azure DevOps (ADO) Migration Tool to extract and migrate one or more projects from a source ADO organization to a target ADO organization. The tool will preserve project metadata, work items, repos, pipelines, test cases, and audit trails using Azure DevOps REST APIs. Python will be used for the backend implementation.

---

## üõ†Ô∏è Functional Overview

### Data Extraction Logic (Python + Azure DevOps APIs)

#### 1. **Connect to ADO**

* Authenticate using **Personal Access Token (PAT)**
* Base URL: `https://dev.azure.com/{org}/`
* Use Python's `requests` library or `azure-devops` SDK

#### 2. **Fetch Available Projects**

```python
GET https://dev.azure.com/{org}/_apis/projects?api-version=7.0
```

* Display all projects with metadata: ID, Name, Visibility, Process Template, Source Control Type

#### 3. **Extract Project Configuration**

```python
GET https://dev.azure.com/{org}/{project}/_apis/projects/{projectId}?includeCapabilities=true&api-version=7.0
```

* Parse capabilities (processTemplate, versioncontrol, classification nodes)

#### 4. **Extract Area & Iteration Paths**

```python
GET https://dev.azure.com/{org}/{project}/_apis/wit/classificationnodes/areas?depth=10
```

* Save hierarchy for later creation

#### 5. **Extract Repositories & Branches**

```python
GET https://dev.azure.com/{org}/{project}/_apis/git/repositories
```

* For each repo, extract branches and commits

#### 6. **Extract Work Items**

* Query all work items using WIQL:

```python
POST https://dev.azure.com/{org}/{project}/_apis/wit/wiql?api-version=7.0
```

* Expand fields, history, relations, attachments

#### 7. **Extract Test Plans and Cases**

```python
GET https://dev.azure.com/{org}/{project}/_apis/test/plans
```

* Then query suites, test cases, and steps per plan

#### 8. **Extract Pipelines**

* For YAML-based pipelines, clone repo YAMLs
* For classic, use:

```python
GET https://dev.azure.com/{org}/{project}/_apis/build/definitions
```

#### 9. **Extract Wikis**

```python
GET https://dev.azure.com/{org}/{project}/_apis/wiki/wikis
```

* Download markdown pages

---

### Data Migration Logic (Python + Azure DevOps APIs)

#### 1. **Create Target Project**

* Manual or automated creation using:

```python
POST https://dev.azure.com/{org}/_apis/projects?api-version=7.0
```

* Set correct process template, repo type

#### 2. **Create Area & Iteration Paths**

```python
POST https://dev.azure.com/{org}/{project}/_apis/wit/classificationnodes/areas
```

#### 3. **Create Repositories**

* Use Git APIs to create empty repos
* Use Git CLI or REST to push branches and commits

#### 4. **Migrate Work Items**

* Create new work items with preserved fields:

```python
POST https://dev.azure.com/{org}/{project}/_apis/wit/workitems/$Bug?api-version=7.0
```

* Use `bypassRules=true` header to preserve timestamps
* Migrate links and attachments after base item creation

#### 5. **Recreate Test Plans & Suites**

```python
POST https://dev.azure.com/{org}/{project}/_apis/test/plans
```

#### 6. **Recreate Pipelines**

* Push YAML files to new repos
* Use REST API to recreate classic pipelines if needed

#### 7. **Recreate Wikis**

* Use wiki API to recreate structure and pages

#### 8. **Log and Audit**

* Maintain logs for each migration step
* Store mapping of source-to-target IDs in MongoDB

---

## üé® UI Design Overview

### 1. Project Selection Page

* AppBar: tool name, ADO status badge, refresh icon
* Project Grid: checkboxes, process type, created date
* Sticky Footer: Extract button, Settings button

### 2. Extraction Overview

* Left Sidebar: List of selected projects (clickable/tabs)
* Main Area: Artifact preview cards with status, counts, preview button
* Expandable previews: First N rows of each artifact

### 3. Migration Page

* Tabs per project
* Toggle sections per artifact (Work Items, Repos, Test Cases)
* Field mapping tables where applicable
* Summary box + Start button

### 4. Audit Page

* Tabs: Summary, Errors, Retry, Timeline
* Virtualized table with status, timestamps, log links
* Export button

### 5. Settings Page

* Horizontal tabs:

  * ADO Connection: Org URLs, PAT inputs
  * Storage: Mongo URI or SQL config
  * Migration Options: checkboxes, toggles
  * Logging: Log level, output directory

---

## üéì Tech Stack

* **Frontend**: React + TailwindCSS
* **Backend**: Python (FastAPI or Flask)
* **Database**: MongoDB
* **Auth**: PAT tokens stored encrypted
* **APIs**: Azure DevOps REST APIs

---

## üìÖ Development Milestones

1. UI scaffolding + tab routing
2. ADO connection logic + settings persistence
3. Project fetch + selection grid
4. Extraction engine (modularized)
5. Migration module with dependency validation
6. Audit page with live logging and retry
7. Final test
