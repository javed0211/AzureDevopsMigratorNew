1. Fix ADO Details Save

When the user saves Azure DevOps details in the Settings page (Source & Target Org):
The details must be stored in the PostgreSQL database.
Currently, data is not saved — it’s lost on page reload.
Do not auto-fetch projects on page load unless ADO details are present and valid.
2. Remove Dummy Data

Migration and Audit & Logs pages are still displaying placeholder or dummy data.
Action:
Remove hardcoded values.
Show only real extracted/migrated logs and audit events.
If nothing has been done, display "No records found" instead.
3. Clarify Refresh Button Functionality

There is a Refresh button next to the Settings button, but its function is unclear.
Action:
Either define its actual purpose (e.g., reload saved org details or revalidate connection) and implement it properly,
Or remove it if not required.
4. Extraction Overview: Missing Tabs & Buttons

The tabs requested for extraction are missing or incomplete.
Action:
Add all requested tabs with proper UI and logic:
Queries
Boards
Pipelines
Test Plans
Dashboards
Work Items
Project Metadata
Work Item Links
Test Suites
Repositories
Each tab must display data project-wise, and include a dedicated “Extract” button per project.
5. All Data Must Be Stored in PostgreSQL

Every piece of extracted data from Azure DevOps:
Must be persisted in the PostgreSQL DB immediately after extraction.
Do not rely on local state or in-memory structures.
Log extraction time, project ID, artifact type, and total items extracted.
6. Correct User Flow Implementation

Update the app logic to follow this end-to-end user journey:

Page Load 
   ↓
User navigates to Settings → Adds Source & Target ADO Details 
   ↓
Details are saved to DB (org URL, PAT token, optional display name)
   ↓
User navigates to Project Selection → Clicks “Sync Projects” 
   ↓
Projects are fetched using the saved Source ADO details 
   ↓
User selects projects to migrate → Clicks “Extract Details” 
   ↓
Extraction Overview tab shows empty state or in-progress jobs per project 
   ↓
User navigates to a tab like “Work Items” and clicks “Extract” for a project 
   ↓
Data is extracted from ADO → Saved to DB → Log created in Migration Queue 
   ↓
User repeats extraction for other artifacts/tabs 
   ↓
Once satisfied, clicks “Migrate” 
   ↓
If Target ADO is not configured → Show prompt to enter it first 
   ↓
Migration API uses saved Target ADO details to create data in destination project 
